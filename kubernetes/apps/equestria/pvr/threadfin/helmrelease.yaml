---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app threadfin
spec:
  chartRef:
    kind: OCIRepository
    name: app-template
  maxHistory: 3
  interval: 1h
  timeout: 10m
  install:
    createNamespace: true
    replace: true
    remediation:
      retries: -1
  upgrade:
    crds: CreateReplace
    cleanupOnFail: true
    remediation:
      retries: -1
      strategy: rollback
  rollback:
    force: true
    cleanupOnFail: true
    recreate: true
  uninstall:
    keepHistory: false
  values:
    controllers:
      threadfin:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          restore:
            securityContext:
              allowPrivilegeEscalation: true
              readOnlyRootFilesystem: true
              runAsUser: 0
              runAsGroup: 0
              fsGroup: 0
              supplementalGroups: [0, 1, 44, 109, 303, 568, 10000]
              capabilities: { drop: ["ALL"] }
            image:
              repository: busybox
              tag: 1.37.0@sha256:fba0711bd6995f7e0158f397d85f63998b4c8b1a1e3b1e9e0394c7b165585440
              pullPolicy: IfNotPresent
            command:
              - "/bin/sh"
              - "-c"
            args: |-
              chown -R 568:568 /home/threadfin/conf
              chmod -R 777 /home/threadfin/conf
              echo "Done.";
        containers:
          threadfin:
            image:
              repository: fyb3roptik/threadfin
              tag: 1.3.0@sha256:7131896922fd1965e064e6ce4dbcf28ca9a8c5ae21960eee56577764485b674e
            env:
              THREADFIN_PORT: &port 34400
              PUID: ${PUID}
              PGID: ${PGID}
              TZ: America/New_York
            # probes:
            #   liveness: &probes
            #     enabled: true
            #     custom: true
            #     spec:
            #       httpGet:
            #         path: /health
            #         port: *port
            #       initialDelaySeconds: 10
            #       periodSeconds: 60
            #       timeoutSeconds: 10
            #       failureThreshold: 5
            #   readiness: *probes
            # securityContext:
            #   allowPrivilegeEscalation: false
            #   readOnlyRootFilesystem: false
            #   capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 500m
                memory: 1Gi
              limits:
                # nvidia.com/gpu: 1
                memory: 4Gi
                cpu: 4000m

    # tolerations:
    #   - key: nvidia.com/gpu
    #     operator: Exists
    #     effect: NoSchedule
    # defaultPodOptions:
    #   securityContext:
    #     runAsNonRoot: true
    #     runAsUser: 568
    #     runAsGroup: 568
    #     fsGroup: 568
    #     fsGroupChangePolicy: OnRootMismatch
    #     supplementalGroups: [44, 109, 10000]
    #     seccompProfile: { type: RuntimeDefault }
    # nodeSelector:
    #   intel.feature.node.kubernetes.io/gpu: "true"

    service:
      app:
        controller: threadfin
        type: ClusterIP
        ports:
          http:
            port: *port
    route:
      internal:
        parentRefs:
          - name: internal
            namespace: network
            kind: Gateway
        hostnames:
          - "${APP}.${ROOT_DOMAIN}"
        kind: HTTPRoute
        rules:
          - backendRefs:
              - identifier: app
                port: *port
        annotations:
          reloader.stakater.com/auto: "true"
          external-dns.alpha.kubernetes.io/target: "${INTERNAL_DOMAIN}"
          # gethomepage.dev/widget.type: threadfin
          # gethomepage.dev/widget.url: "http://${APP}.${INTERNAL_CLUSTER_SERVICE}:34400"
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Media
          gethomepage.dev/icon: threadfin.svg
          gethomepage.dev/name: Threadfin
          gethomepage.dev/namespace: "{{ .Release.Namespace }}" # The kubernetes namespace the app resides in
          gethomepage.dev/app: "${APP}"

    ingress:
      tailscale:
        className: tailscale
        annotations:
          reloader.stakater.com/auto: "true"
        defaultBackend:
          service:
            name: *app
            port:
              number: *port
          hosts:
            - hosts:
                - *app

    persistence:
      config:
        existingClaim: threadfin-config
        globalMounts:
          - path: /home/threadfin/conf/
