---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.2.0/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app homarr
spec:
  chartRef:
    kind: OCIRepository
    name: app-template
  maxHistory: 3
  interval: 15m
  timeout: 5m
  install:
    createNamespace: true
    replace: true
    remediation:
      retries: 7
  upgrade:
    crds: CreateReplace
    cleanupOnFail: true
    remediation:
      retries: 7
      strategy: rollback
  rollback:
    force: true
    cleanupOnFail: true
    recreate: true
  uninstall:
    keepHistory: false
  dependsOn: []
  values:
    controllers:
      *app :
        type: statefulset
        annotations:
          reloader.stakater.com/auto: "true"
        replicas: 3
        pod:
          securityContext:
            runAsNonRoot: true
            fsGroupChangePolicy: "OnRootMismatch"
        containers:
          *app :
            image:
              repository: ghcr.io/homarr-labs/homarr
              tag: postgresql
            env:
              TZ: "${TIMEZONE}"
              PUID: 1000
              PGID: 1000
              ENABLE_KUBERNETES: true
            envFrom:
              - secretRef:
                  name: homarr-env
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                cpu: 600m
                memory: 1Gi
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/health/ready
                    port: &port 7575
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    persistence:
      config:
        type: secret
        name: ${APP}-config
        defaultMode: 493
        globalMounts:
          - path: /config/selfhosted.yaml
            subPath: config.yaml

    service:
      app:
        controller: *app
        type: ClusterIP
        ports:
          http:
            port: *port

    ingress:
      internal:
        className: internal
        hosts:
          - host: "${APP}.${ROOT_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
    serviceAccount:
      *app : {}
    secrets:
      *app :
        type: kubernetes.io/service-account-token
        annotations:
          kubernetes.io/service-account.name: *app
        stringData:
          token: ""
          certificate: ""
    rbac:
      roles:
        homarr:
          type: ClusterRole
          rules:
            - apiGroups: [ "" ]
              resources: [ "pods", "services", "secrets", "configmaps", "persistentvolumeclaims", "namespaces", "persistentvolumes", "nodes" ]
              verbs: [ "get", "list", "watch", "use" ]
            - apiGroups: [ "apps" ]
              resources: [ "deployments" ]
              verbs: [ "get", "list", "watch" ]
            - apiGroups: [ "networking.k8s.io" ]
              resources: [ "ingresses" ]
              verbs: [ "get", "list", "watch" ]
            - apiGroups: [ "metrics.k8s.io" ]
              resources: [ "nodes", "pods" ]
              verbs: [ "get", "list", "watch" ]
      bindings:
        homarr:
          type: ClusterRoleBinding
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: homarr
          subjects:
            - kind: ServiceAccount
              name: *app
              namespace: ${NAMESPACE}


#           {{- include "homarr.labels" . | nindent 4 }}
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: {{ .Release.Name }}-sa-token
#   annotations:
#     kubernetes.io/service-account.name: "{{ .Release.Name }}-sa"
# type: kubernetes.io/service-account-token
# ---
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: {{ .Release.Name }}-rolebinding
#   labels:
#       {{- include "homarr.labels" . | nindent 4 }}
# subjects:
#   - kind: ServiceAccount
#     name: {{ .Release.Name }}-sa
#     namespace: {{ .Release.Namespace }}
# roleRef:
#   kind: Role
#   name: {{ .Release.Name }}-role
#   apiGroup: rbac.authorization.k8s.io
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: {{ .Release.Name }}-cluster-role
#   labels:
#       {{- include "homarr.labels" . | nindent 4 }}
# rules:
#   - apiGroups: [ "" ]
#     resources: [ "pods", "services", "secrets", "configmaps", "persistentvolumeclaims", "namespaces", "persistentvolumes", "nodes" ]
#     verbs: [ "get", "list", "watch", "use" ]
#   - apiGroups: [ "apps" ]
#     resources: [ "deployments" ]
#     verbs: [ "get", "list", "watch" ]
#   - apiGroups: [ "networking.k8s.io" ]
#     resources: [ "ingresses" ]
#     verbs: [ "get", "list", "watch" ]
#   - apiGroups: [ "metrics.k8s.io" ]
#     resources: [ "nodes", "pods" ]
#     verbs: [ "get", "list", "watch" ]

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: {{ .Release.Name }}-cluster-rolebinding
#   labels:
#       {{- include "homarr.labels" . | nindent 4 }}
# subjects:
#   - kind: ServiceAccount
#     name: {{ .Release.Name }}-sa
#     namespace: {{ .Release.Namespace }}
# roleRef:
#   kind: ClusterRole
#   name: {{ .Release.Name }}-cluster-role
#   apiGroup: rbac.authorization.k8s.io
